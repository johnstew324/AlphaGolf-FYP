# test_all_processors.py
import os
import sys
import pandas as pd
import numpy as np
from datetime import datetime

# Add project root to path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
sys.path.append(parent_dir)

# Import components
from database import DatabaseManager
from config import Config
from data_Excator.data_excractor import DataExtractor
from feature_engineering.processors.course_stats_processor import CourseStatsProcessor
from feature_engineering.processors.tournament_weather_processor import TournamentWeatherProcessor
from feature_engineering.processors.scorecard_processor import ScorecardProcessor
from feature_engineering.processors.current_form_processor import CurrentFormProcessor
from feature_engineering.processors.course_fit_processor import CourseFitProcessor
from feature_engineering.processors.tournament_history_stats_processor import TournamentHistoryStatsProcessor

def test_processor(processor, name, tournament_id, player_ids, season):
    """Test a processor and return results with diagnostic info."""
    print(f"\n=== Testing {name} Processor ===")
    
    try:
        start_time = datetime.now()
        features = processor.extract_features(tournament_id=tournament_id, player_ids=player_ids, season=season)
        elapsed = (datetime.now() - start_time).total_seconds()
        
        if features is None or features.empty:
            print(f"No features generated by {name} processor")
            return None
        
        print(f"Successfully generated {len(features)} records with {features.shape[1]} features")
        print(f"Processing time: {elapsed:.2f} seconds")
        
        # Show sample column names
        print("\nSample feature columns:")
        sample_cols = features.columns[:5].tolist()
        print(", ".join(sample_cols))
        
        # Show sample data row if available
        if len(features) > 0:
            print("\nSample feature record:")
            if 'player_id' in features.columns:
                print(f"Player ID: {features['player_id'].iloc[0]}")
            for col in sample_cols:
                if col != 'player_id':
                    print(f"{col}: {features.iloc[0][col]}")
        
        return features
    
    except Exception as e:
        print(f"Error testing {name} processor: {str(e)}")
        import traceback
        traceback.print_exc()
        return None

def main():
    # Initialize database connection
    try:
        print("Connecting to MongoDB...")
        db_manager = DatabaseManager(uri=Config.MONGODB_URI, database_name="pga_tour_data")
        print("Successfully connected to database")
    except Exception as e:
        print(f"Error connecting to database: {str(e)}")
        return

    # Create data extractor
    extractor = DataExtractor(db_manager)
    
    # Define test parameters
    # Use a recent tournament that should have data in all collections
    tournament_id = "R2024016"  # 2024 Sentry Tournament
    season = 2024
    
    # Pick a few known players who likely played in this tournament
    player_ids = ["33948", "30925", "35891"]  # Byeong Hun An and others
    
    print("\n=== Test Parameters ===")
    print(f"Tournament ID: {tournament_id}")
    print(f"Season: {season}")
    print(f"Player IDs: {', '.join(player_ids)}")
    
    # Create all processors
    processors = {
        "Course Stats": CourseStatsProcessor(extractor),
        "Tournament Weather": TournamentWeatherProcessor(extractor),
        "Scorecard": ScorecardProcessor(extractor),
        "Current Form": CurrentFormProcessor(extractor),
        "Course Fit": CourseFitProcessor(extractor),
        "Tournament History Stats": TournamentHistoryStatsProcessor(extractor)
    }
    
    # Test each processor
    results = {}
    for name, processor in processors.items():
        result = test_processor(processor, name, tournament_id, player_ids, season)
        results[name] = result
    
    # Report summary
    print("\n=== Test Summary ===")
    for name, result in results.items():
        status = "✓ Success" if result is not None and not result.empty else "✗ Failed"
        feature_count = result.shape[1] if result is not None and not result.empty else 0
        print(f"{name}: {status} ({feature_count} features)")
    
    # Try to combine all successful results
    successful_dfs = [df for df in results.values() if df is not None and not df.empty]
    if len(successful_dfs) > 1:
        print("\n=== Testing Feature Combination ===")
        try:
            # Combine on player_id
            combined = successful_dfs[0]
            for df in successful_dfs[1:]:
                if 'player_id' in df.columns and 'player_id' in combined.columns:
                    combined = pd.merge(combined, df, on='player_id', how='outer', suffixes=('', '_dup'))
                    # Remove duplicate columns
                    combined = combined[[c for c in combined.columns if not c.endswith('_dup')]]
            
            print(f"Successfully combined {len(successful_dfs)} feature sets")
            print(f"Combined shape: {combined.shape}")
            
            # Save to CSV for inspection
            csv_path = 'combined_features_test.csv'
            combined.to_csv(csv_path, index=False)
            print(f"Saved combined features to {csv_path}")
        except Exception as e:
            print(f"Error combining features: {str(e)}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main()